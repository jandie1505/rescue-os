name: Build Debian Live (privileged container)

on:
  #push:
  #  branches: [ "main" ]
  schedule:
    - cron: "15 2 1 1,3,5,7,9,11 *"    # monatlich, 02:15 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pull Debian image
        run: docker pull debian:trixie

      - name: Build ISO inside privileged Debian container
        run: |
          docker run --rm \
            --privileged \
            -v "$PWD":/work \
            -w /work \
            --security-opt seccomp=unconfined \
            debian:trixie bash -euo pipefail -lc '
              apt-get update
              DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
                live-build xorriso syslinux-common isolinux ca-certificates git coreutils sudo

              chmod +x ./build.sh
              ./build.sh

              test -f live-build/live-image-amd64.hybrid.iso
            '

      - name: SHA256 & size
        run: |
          ls -lh live-build/live-image-amd64.hybrid.iso
          sha256sum live-build/live-image-amd64.hybrid.iso > live-build/live-image-amd64.hybrid.iso.sha256
          cat live-build/live-image-amd64.hybrid.iso.sha256

      # Optional: Ephemeres Artifact (bleibt weiterhin erhalten, falls du es im Actions-Tab brauchst)
      - name: Upload artifact (ephemeral)
        uses: actions/upload-artifact@v4
        with:
          name: rescue-os-iso
          path: |
            live-build/live-image-amd64.hybrid.iso
            live-build/live-image-amd64.hybrid.iso.sha256
          if-no-files-found: error
          compression-level: 0
          retention-days: 30

      # Release-Metadaten vorbereiten (Name = Datum, Tag = YYYY-MM-DD-<shortsha>, Body englisch)
      - name: Prepare release metadata
        id: meta
        shell: bash
        run: |
          DATE_UTC="$(date -u +%F)"                # YYYY-MM-DD (UTC)
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "date=${DATE_UTC}" >> "$GITHUB_OUTPUT"
          echo "tag=${DATE_UTC}-${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "name=Rescue OS ${DATE_UTC}" >> "$GITHUB_OUTPUT"

          {
            echo "Automated build on ${DATE_UTC} (UTC)."
            echo
            echo "Commit: ${GITHUB_SHA}"
            echo "Tag: ${DATE_UTC}-${SHORT_SHA}"
            echo "Run: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          } > body.txt
          echo "bodyfile=body.txt" >> "$GITHUB_OUTPUT"

      # Release erstellen & Assets hochladen
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.name }}
          body_path: ${{ steps.meta.outputs.bodyfile }}
          draft: false
          prerelease: false
          files: |
            live-build/live-image-amd64.hybrid.iso
            live-build/live-image-amd64.hybrid.iso.sha256
